#include "lpc17xx_i2c.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_uart.h"
#include "lpc_types.h"
#include "serial.h"

int count = 0;

void delay(unsigned int msec)
{
        int n;
        for(n = 0; n <= 5000*msec; n++)
        {}

}

int send_message(char *message, int length){
        return(UART_Send((LPC_UART_TypeDef *) LPC_UART0, (uint8_t *)message, length, BLOCKING));  

}

void printsetup(void){
        UART_CFG_Type UARTConfigStruct;			// UART Configuration structure variable
	UART_FIFO_CFG_Type UARTFIFOConfigStruct;	// UART FIFO configuration Struct variable
	PINSEL_CFG_Type PinCfg;				// Pin configuration for UART
        
        PinCfg.OpenDrain = 0;
        PinCfg.Pinmode = 0;
        PinCfg.Funcnum = 1;   
        PinCfg.Portnum = 0;
        PinCfg.Pinnum = 2;
        PINSEL_ConfigPin(&PinCfg);
        PinCfg.Pinnum = 3;
        PINSEL_ConfigPin(&PinCfg);

        UART_ConfigStructInit(&UARTConfigStruct);      

        UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

        UART_Init((LPC_UART_TypeDef *) LPC_UART0, &UARTConfigStruct);

        UART_TxCmd((LPC_UART_TypeDef *) LPC_UART0, ENABLE);
}


void I2Csetup(void){

        PINSEL_CFG_Type PinCfg;
        
        PinCfg.OpenDrain = 0;
        PinCfg.Pinmode = 0;
        PinCfg.Funcnum = 3;   
        PinCfg.Portnum = 0;
        PinCfg.Pinnum = 1;
        PINSEL_ConfigPin(&PinCfg);
        PinCfg.Pinnum = 0;
        PINSEL_ConfigPin(&PinCfg);

        uint32_t I2Csystemcoreclock = 100000;
        I2C_Init((LPC_I2C_TypeDef *) LPC_I2C1, I2Csystemcoreclock);
        I2C_Cmd((LPC_I2C_TypeDef *) LPC_I2C1, 1);
}


void lcdsetup(void){

        I2C_M_SETUP_Type SEND;

        uint8_t LCDinit[11] = {0x00
,0x34,0x0c,0x06,0x35,0x04,0x10,0x42,0x9f,0x34,0x02};
        
        SEND.sl_addr7bit = 59;
        SEND.tx_data = LCDinit;
        SEND.tx_length = sizeof(uint8_t)*11;
        SEND.rx_data = NULL;
        SEND.rx_length = 0;
        SEND.retransmissions_max = 3;
        
        uint8_t transfer = I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );
                
        if (transfer == SUCCESS)
        {
        char message[] = "screen set up \n\r";
        send_message(message, strlen(message));
        }
}

void lcdclear(void){
        
        I2C_M_SETUP_Type SEND;

        uint8_t clear[2] = {0x00 , 0x01};
        
        SEND.sl_addr7bit = 59;
        SEND.tx_data = clear;
        SEND.tx_length = sizeof(uint8_t)*2;
        SEND.rx_data = NULL;
        SEND.rx_length = 0;
        SEND.retransmissions_max = 3;

        I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );

        delay(200);
}

void lcdwrite(void){
        
        I2C_M_SETUP_Type SEND;

        uint8_t LCDaddress[2] = {0x00,0x80};   //selects the first write 

        SEND.sl_addr7bit = 59;
        SEND.tx_data = LCDaddress;
        SEND.tx_length = sizeof(uint8_t)*2;
        SEND.rx_data = NULL;
        SEND.rx_length = 0;
        SEND.retransmissions_max = 3;

        I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );
        uint8_t write[7] = {0x40,0xC2,0x61,0x64,0x67,0x65,0x72};
        SEND.tx_data = write;
        SEND.tx_length = sizeof(write);

        uint8_t transfer = I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );

        if (transfer == SUCCESS)
        {
        char message[] = "message written \n\r";
        send_message(message, strlen(message));
        }
        

}

void I2Cbussniffer(uint8_t slave_address){
        unsigned char buf[1] = {0};

        I2C_M_SETUP_Type SEND;
        
        SEND.sl_addr7bit = slave_address;
        SEND.tx_data = buf;
        SEND.tx_length = 1 ;
        SEND.rx_data = NULL;
        SEND.rx_length = 0;
        SEND.retransmissions_max = 3;

        uint8_t transfer = I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );

        // print if success
        if (transfer == SUCCESS)
        {
        char message[0];
        sprintf(message , "port address %d \n\r", slave_address);
        send_message(message, strlen(message));
        }
     
}

void lcdscreen(void) {
        printsetup();
        
        char message[] = "print setup \n\r";
        send_message(message, strlen(message));
        
        I2Csetup();
        char message1[] = "I2C setup \n\r";
        send_message(message1, strlen(message1));

        lcdsetup();
        lcdclear();
        lcdwrite();
}


void columnread(unsigned char * buf) {

                I2C_M_SETUP_Type READ;                        
                
                READ.sl_addr7bit = 33;
                READ.tx_data = NULL;
                READ.tx_length = 0;
                READ.rx_data = &buf[0];
                READ.rx_length = sizeof(unsigned char);
                READ.retransmissions_max = 3;
                              
                I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &READ, I2C_TRANSFER_POLLING );
                }

void columnwrite(unsigned char * buf) {
                
                I2C_M_SETUP_Type SEND;

                SEND.sl_addr7bit = 33;
                SEND.tx_data = buf;
                SEND.tx_length = sizeof(unsigned char);
                SEND.rx_data = NULL;
                SEND.rx_length = 0;
                SEND.retransmissions_max = 3;

                I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );
                }

void printchar(uint8_t * buf) {
        count += 1;
        I2C_M_SETUP_Type SEND;
        
        SEND.sl_addr7bit = 59;
        SEND.tx_data = buf;
        SEND.tx_length = sizeof(uint8_t) * 2;
        SEND.rx_data = NULL;
        SEND.rx_length = 0;
        SEND.retransmissions_max = 3;        

        I2C_MasterTransferData((LPC_I2C_TypeDef *) LPC_I2C1 , &SEND, I2C_TRANSFER_POLLING );

}

void keypad(void) {

        printsetup();       
        I2Csetup();
        lcdsetup();
        lcdclear();
        

        uint8_t keypadvalues[16] = {0xB1, 0xB4, 0xB7, 0xaa,
                                    0xB2, 0xB5, 0xB8, 0xB0,
                                    0xB3, 0xB6, 0xB9, 0xa3,
                                    0xc1, 0xc2, 0xc3, 0xc4};
                                                // keypad
        
        unsigned char buf[0x6];
        unsigned char testbuf[0x6];
        int i;
        //uint8_t address[1] = 0x80
        
        while(1){
                buf[0] = 0x7F ;
                columnwrite(buf);
                delay(50);
                columnread(testbuf);
                
                if (buf[0] != testbuf[0]){
                        if(testbuf[0] == 0x77){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[0]};
                              printchar(keypadthing);    
                        }
                        else if(testbuf[0] == 0x7B){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[1]};
                              printchar(keypadthing);
			       
                               
                        }
                        else if(testbuf[0] == 0x7D){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[2]};
                              printchar(keypadthing);         
                        }
                        else {
                              uint8_t keypadthing[2] = {0x40, keypadvalues[3]};
                              printchar(keypadthing);  
                                   
                        }
                        
                }                  
                                
                buf[0] = 0xBF ;
                columnwrite(buf);
                delay(50);
                columnread(testbuf);
             
                if (buf[0] != testbuf[0]){
                        if(testbuf[0] == 0xB7){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[4]};
                              printchar(keypadthing);    
                        }
                        else if(testbuf[0] == 0xBB){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[5]};
                              printchar(keypadthing); 
                               
                        }
                        else if(testbuf[0] == 0xBD){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[6]};
                              printchar(keypadthing);       
                        }
                        else {
                              uint8_t keypadthing[2] = {0x40, keypadvalues[7]};
                              printchar(keypadthing); 
                        }
                }

                buf[0] = 0xDF ;
                columnwrite(buf);
                delay(50);
                columnread(testbuf);
          
                if (buf[0] != testbuf[0]){
                        if(testbuf[0] == 0xD7){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[8]};
                              printchar(keypadthing);    
                        }
                        else if(testbuf[0] == 0xDB){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[9]};
                              printchar(keypadthing); 
                               
                        }
                        else if(testbuf[0] == 0xDD){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[10]};
                              printchar(keypadthing);       
                        }
                        else {
                              uint8_t keypadthing[2] = {0x40, keypadvalues[11]};
                              printchar(keypadthing); 
                        }
                }
                
                buf[0] = 0xEF ;
                columnwrite(buf);
                delay(50);
                columnread(testbuf);
            
                if (buf[0] != testbuf[0]){
                        if(testbuf[0] == 0xE7){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[12]};
                              printchar(keypadthing);    
                        }
                        else if(testbuf[0] == 0xEB){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[13]};
                              printchar(keypadthing); 
                               
                        }
                        else if(testbuf[0] == 0xED){
                              uint8_t keypadthing[2] = {0x40, keypadvalues[14]};
                              printchar(keypadthing);       
                        }
                        else {
                              uint8_t keypadthing[2] = {0x40, keypadvalues[15]};
                              printchar(keypadthing); 
                        }
                }
                if(count == 16){
                        uint8_t keypadthing2[2] = {0x40, keypadvalues[12]};
                        for(i = 0; i < 24; i++){
                        printchar(keypadthing2);
                }
                count = 0;
                }  
                }    
}

void main(void){
        /*uint8_t slave_address = 1;
        uint8_t max = 128;
        printsetup();
        I2Csetup();
        for (slave_address ; slave_address <= max; slave_address++)
        {
        I2Cbussniffer(slave_address);     
        }
        */
        

        //lcdscreen();
        
        keypad();
        
}
